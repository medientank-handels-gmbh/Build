name: "Build"

on:
  workflow_call:
    inputs:
      repository:
        description: Repository
        required: true
        type: string
      branch:
        description: "Branchname(default: dev)"
        default: dev
        type: string
      solution:
        description: Solution
        required: true
        type: string
      webpublish:
        description: "WebPublish"
        default: false
        type: boolean
      library:
        description: "Is a DLL"
        default: false
        type: boolean
      publishname:
        description: "Name of Publish"
        type: string
        required: false
      release:
        description: "Is a Release"
        type: boolean
        default: false
    secrets:
      username:
        description: GitHub-Username
        required: true
      token:
        description: Nuget-Read-Token
        required: true
      
jobs:
  Build:
  
    runs-on: windows-latest

    steps:
        
    - name: Check Input
      if: inputs.publishname != ''
      run: echo "PublishName=${{ inputs.publishname }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      
    - name: Check Input2
      if: inputs.publishname == ''
      run: echo "PublishName=${{ inputs.solution }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
    
    - uses: actions/checkout@v2
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.branch }}
    
    - name: Navigate to Workspace
      run: cd $GITHUB_WORKSPACE1
    
    - name: Get Version
      id: Version
      if: inputs.release
      run: |
        $var = select-string -Path "./${{ inputs.solution }}/Properties/AssemblyInfo.cs" -Pattern "AssemblyFileVersion..(\d+\.\d+\.\d+\.\d+)"  | % { $_.Matches } | % {$_.Groups[1]} | % { $_.Value }
        echo "::set-output name=var::$var"
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.3

    - name: Setup NuGet
      run: |
        Invoke-WebRequest https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
        nuget sources add -Source https://nuget.pkg.github.com/medientank-handels-gmbh/index.json -username ${{ secrets.username }} -password ${{ secrets.token }}   

    - name: Create Build Directory
      run: |
            mkdir ${{ github.workspace }}\_build
            mkdir ${{ github.workspace }}\${{ inputs.solution }}\bin\Release
      
    - name: Restore Packages
      run: nuget restore ${{ inputs.solution }}.sln

    - name: Publish Solution Release
      if: ${{ inputs.webpublish &&  inputs.release}}
      run: msbuild.exe ${{ inputs.solution }}.sln /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl='${{ github.workspace }}\_build'
    
    - name: Publish Solution Debug
      if: ${{ inputs.webpublish &&  !inputs.release}}
      run: msbuild.exe ${{ inputs.solution }}.sln /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Debug" /p:PublishUrl='${{ github.workspace }}\_build'
    
    - name: Build Solution Release
      if: ${{ !inputs.webpublish &&  inputs.release}}
      run: msbuild.exe ${{ inputs.solution }}.sln /nologo -interactive:false /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:OutDir='${{ github.workspace }}\_build'
    
    - name: Build Solution Debug
      if: ${{ !inputs.webpublish &&  !inputs.release}}
      run: msbuild.exe ${{ inputs.solution }}.sln /nologo -interactive:false /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Debug" /p:OutDir='${{ github.workspace }}\_build'
    
    - name: Zip Build
      run: Compress-Archive -Path '${{ github.workspace }}\_build\*' -DestinationPath '.\${{ env.PublishName }}.zip'
      
    - name: Archive production artifacts
      if: ${{ !inputs.release && !inputs.library }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PublishName }}.zip
        path: .\${{ env.PublishName }}.zip
        if-no-files-found: error
        retention-days: 7
        
    - name: Archive production artifacts
      if: inputs.library
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PublishName }}.zip
        path: '${{ github.workspace }}\_build\*.dll'
        if-no-files-found: error
        retention-days: 7
        
    - name: Create Release
      id: create_release
      if: inputs.release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.Version.outputs.var }}
        release_name: ${{ steps.Version.outputs.var }}
        draft: false
        prerelease: false
        
    - name: Copy Release DLL
      if: inputs.library
      run: Copy-Item -Path '${{ github.workspace }}\_build\*' -Destination '${{ github.workspace }}\${{ inputs.solution }}\bin\Release' -recurse -Force
      
    - name: Copy Debug DLL
      if: inputs.library && !inputs.release
      run: Copy-Item -Path '${{ github.workspace }}\_build\*' -Destination '${{ github.workspace }}\${{ inputs.solution }}\bin\Debug' -recurse -Force
        
    - name: Base Path
      run: cd '${{ github.workspace }}\${{ inputs.solution }}'
        
    - name: Build Release Package
      if: inputs.library && inputs.release
      run: nuget pack '.\${{ inputs.solution }}\${{ inputs.solution }}.csproj' -properties Configuration=Release
        
    - name: Build Debug Package
      if: inputs.library && !inputs.release
      run: nuget pack '.\${{ inputs.solution }}\${{ inputs.solution }}.csproj' -suffix debug -properties Configuration=Debug
        
    - name: Publish Package
      if: inputs.library
      run: |
        foreach($file in Get-ChildItem '$${{ inputs.solution }}\*.nupkg')
        {
          nuget push $file ${{ secrets.GITHUB_TOKEN }} -Source https://nuget.pkg.github.com/medientank-handels-gmbh/index.json
        }
        
    - name: Upload Release Asset
      id: upload-release-asset 
      if: inputs.release == true
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: .\${{ env.PublishName }}.zip
        asset_name: ${{ env.PublishName }}.zip
        asset_content_type: application/zip
